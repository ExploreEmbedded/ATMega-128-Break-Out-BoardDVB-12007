
SerialCommunication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000978  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003d6  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000db  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c1  00000000  00000000  00000ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000113  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ae  00000000  00000000  0000130b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e6       	ldi	r30, 0x6A	; 106
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e4       	ldi	r26, 0x40	; 64
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 34       	cpi	r26, 0x40	; 64
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  c6:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <serial_init>:

#include<avr/io.h>

void serial_init()
{
	UCSR0B= 0x18;   // Enable Receiver and Transmitter
  ce:	28 e1       	ldi	r18, 0x18	; 24
  d0:	2a b9       	out	0x0a, r18	; 10
	UCSR0C= 0x86;   // Asynchronous mode 8-bit data and 1-stop bit
  d2:	96 e8       	ldi	r25, 0x86	; 134
  d4:	90 93 95 00 	sts	0x0095, r25
	UCSR0A= 0x00;   // Normal Baud rate(no doubling), Single processor commn
  d8:	1b b8       	out	0x0b, r1	; 11
	UBRR0H= 0;
  da:	10 92 90 00 	sts	0x0090, r1
	UBRR0L= 103;     // 9600 Baud rate at 16Mhz
  de:	87 e6       	ldi	r24, 0x67	; 103
  e0:	89 b9       	out	0x09, r24	; 9

	UCSR1B= 0x18;   // Enable Receiver and Transmitter
  e2:	20 93 9a 00 	sts	0x009A, r18
	UCSR1C= 0x86;   // Asynchronous mode 8-bit data and 1-stop bit
  e6:	90 93 9d 00 	sts	0x009D, r25
	UCSR1A= 0x00;   // Normal Baud rate(no doubling), Single processor commn
  ea:	10 92 9b 00 	sts	0x009B, r1
	UBRR1H= 0;
  ee:	10 92 98 00 	sts	0x0098, r1
	UBRR1L= 103;     // 9600 Baud rate at 16Mhz
  f2:	80 93 99 00 	sts	0x0099, r24
}
  f6:	08 95       	ret

000000f8 <tx_char>:

void tx_char(char ch)
{
	while((UCSR0A & 0x20)==0); // Wait till Transmitter(UDR) register becomes Empty
  f8:	5d 9b       	sbis	0x0b, 5	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <tx_char>
	UDR0 =ch;           // Load the data to be transmitted
  fc:	8c b9       	out	0x0c, r24	; 12
}
  fe:	08 95       	ret

00000100 <tx_string>:

void tx_string(char *str_ptr)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	ec 01       	movw	r28, r24
	while(*str_ptr)
 106:	88 81       	ld	r24, Y
 108:	88 23       	and	r24, r24
 10a:	31 f0       	breq	.+12     	; 0x118 <tx_string+0x18>
{
	while((UCSR0A & 0x20)==0); // Wait till Transmitter(UDR) register becomes Empty
	UDR0 =ch;           // Load the data to be transmitted
}

void tx_string(char *str_ptr)
 10c:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str_ptr)
	tx_char(*str_ptr++);
 10e:	0e 94 7c 00 	call	0xf8	; 0xf8 <tx_char>
	UDR0 =ch;           // Load the data to be transmitted
}

void tx_string(char *str_ptr)
{
	while(*str_ptr)
 112:	89 91       	ld	r24, Y+
 114:	88 23       	and	r24, r24
 116:	d9 f7       	brne	.-10     	; 0x10e <tx_string+0xe>
	tx_char(*str_ptr++);
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <tx_char1>:

void tx_char1(char ch)
{
	while((UCSR1A & 0x20)==0); // Wait till Transmitter(UDR) register becomes Empty
 11e:	eb e9       	ldi	r30, 0x9B	; 155
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	90 81       	ld	r25, Z
 124:	95 ff       	sbrs	r25, 5
 126:	fd cf       	rjmp	.-6      	; 0x122 <tx_char1+0x4>
	UDR1 =ch;           // Load the data to be transmitted
 128:	80 93 9c 00 	sts	0x009C, r24
}
 12c:	08 95       	ret

0000012e <tx_string1>:

void tx_string1(char *str_ptr)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	while(*str_ptr)
 134:	88 81       	ld	r24, Y
 136:	88 23       	and	r24, r24
 138:	31 f0       	breq	.+12     	; 0x146 <tx_string1+0x18>
{
	while((UCSR1A & 0x20)==0); // Wait till Transmitter(UDR) register becomes Empty
	UDR1 =ch;           // Load the data to be transmitted
}

void tx_string1(char *str_ptr)
 13a:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str_ptr)
	tx_char1(*str_ptr++);
 13c:	0e 94 8f 00 	call	0x11e	; 0x11e <tx_char1>
	UDR1 =ch;           // Load the data to be transmitted
}

void tx_string1(char *str_ptr)
{
	while(*str_ptr)
 140:	89 91       	ld	r24, Y+
 142:	88 23       	and	r24, r24
 144:	d9 f7       	brne	.-10     	; 0x13c <tx_string1+0xe>
	tx_char1(*str_ptr++);
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <main>:

void main()
{
	
	serial_init();
 14c:	0e 94 67 00 	call	0xce	; 0xce <serial_init>
	
	while(1)
	{
		tx_string("Channel 0 ExploreEmbedded.com \r\n");
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	d1 e0       	ldi	r29, 0x01	; 1
		tx_string1("Channel 1 Lets build....   \r\n");
 154:	01 e2       	ldi	r16, 0x21	; 33
 156:	11 e0       	ldi	r17, 0x01	; 1
	
	serial_init();
	
	while(1)
	{
		tx_string("Channel 0 ExploreEmbedded.com \r\n");
 158:	ce 01       	movw	r24, r28
 15a:	0e 94 80 00 	call	0x100	; 0x100 <tx_string>
		tx_string1("Channel 1 Lets build....   \r\n");
 15e:	c8 01       	movw	r24, r16
 160:	0e 94 97 00 	call	0x12e	; 0x12e <tx_string1>
 164:	f9 cf       	rjmp	.-14     	; 0x158 <main+0xc>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
